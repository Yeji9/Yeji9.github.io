{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/utils/helpers.js"],"names":["data","posts","node","author","language","categories","cntPerCategory","obj","sortable","item","b","a","sortObjectByValue","getSortedCategoriesByCount","useState","tabIndex","setTabIndex","onTabIndexChange","useCallback","title","onChange","tabs","showMoreButton"],"mappings":"+MAUe,sBAAe,IAAZA,EAAW,EAAXA,KACVC,EAAQD,EAAA,6BAAiC,gBAAGE,EAAH,cAAc,QAAd,MADpB,EAEEF,OAFF,aAEnBG,EAFmB,SAEXC,EAFW,WAGrBC,EAAU,2BCNwB,SAACJ,GACzC,IAAMK,EAAN,GAQA,OANAL,WAAc,YAAoB,EAAjBI,WACfA,SAAmB,YACjBC,KAA2BA,KAA2BA,KAA3BA,EAA3BA,QAZoB,SAACC,GACzB,IAAIC,EAAJ,GACA,IAAK,IAAL,OAAsBA,OAAc,CAACC,EAAMF,EAArBC,KAEtB,OADAA,QAAc,qBAAUE,KAAOC,EAAjB,MACPH,EAYAI,CAAA,QAAsC,2BDHfC,CAA9B,KAH2B,EAIKC,mBAJL,GAIpBC,EAJoB,KAIVC,EAJU,KAKrBC,EAAmBC,uBAAY,qBAAcF,EAAd,KAArC,IAEA,OACE,2BACE,uBAAKG,MAAM,SACX,uBAAKhB,OAAL,EAAqBC,SAAUA,IAC/B,uBACEH,MADF,EAEEmB,SAFF,EAGEC,KAHF,EAIEN,SAJF,EAKEO,gBAAc","file":"component---src-pages-index-js-0181a13244045390649f.js","sourcesContent":["import React, { useCallback, useState } from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport Layout from '../components/layout';\r\nimport SEO from '../components/seo';\r\nimport Bio from '../components/bio';\r\nimport Post from '../models/post';\r\n\r\nimport { getSortedCategoriesByCount } from '../utils/helpers';\r\nimport PostTabs from '../components/post-tabs';\r\n\r\nexport default ({ data }) => {\r\n  const posts = data.allMarkdownRemark.edges.map(({ node }) => new Post(node));\r\n  const { author, language } = data.site.siteMetadata;\r\n  const categories = ['All', ...getSortedCategoriesByCount(posts)];\r\n  const [tabIndex, setTabIndex] = useState(0);\r\n  const onTabIndexChange = useCallback((e, value) => setTabIndex(value), []);\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title=\"Home\" />\r\n      <Bio author={author} language={language} />\r\n      <PostTabs\r\n        posts={posts}\r\n        onChange={onTabIndexChange}\r\n        tabs={categories}\r\n        tabIndex={tabIndex}\r\n        showMoreButton\r\n      />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    allMarkdownRemark(sort: { fields: frontmatter___date, order: DESC }) {\r\n      edges {\r\n        node {\r\n          id\r\n          excerpt(pruneLength: 500, truncate: true)\r\n          frontmatter {\r\n            categories\r\n            title\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n          }\r\n          fields {\r\n            slug\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    site {\r\n      siteMetadata {\r\n        language\r\n        author {\r\n          name\r\n          bio {\r\n            role\r\n            description\r\n            thumbnail\r\n          }\r\n          social {\r\n            github\r\n            linkedIn\r\n            email\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","const sortObjectByValue = (obj) => {\r\n  let sortable = [];\r\n  for (let item in obj) sortable.push([item, obj[item]]);\r\n  sortable.sort((a, b) => b[1] - a[1]);\r\n  return sortable;\r\n};\r\n\r\nexport const getSortedCategoriesByCount = (posts) => {\r\n  const cntPerCategory = {};\r\n\r\n  posts.forEach(({ categories }) => {\r\n    categories.forEach((category) => {\r\n      cntPerCategory[category] = cntPerCategory[category] ? cntPerCategory[category] + 1 : 1;\r\n    });\r\n  });\r\n\r\n  return sortObjectByValue(cntPerCategory).map(([category]) => category);\r\n};\r\n"],"sourceRoot":""}